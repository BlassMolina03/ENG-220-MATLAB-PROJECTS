# -*- coding: utf-8 -*-
"""project_try7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RT3ePyhERXRieu12iabaNx2Zgihj31kQ
"""

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

# Title of the app
st.title('Gun Violence Data Visualization')

# Preload Data
def read_large_csv(url):
    try:
        chunk_size = 1000
        chunks = pd.read_csv(url, encoding="ISO-8859-1", sep=",", on_bad_lines="skip", chunksize=chunk_size)
        df_list = [chunk for chunk in chunks]
        df = pd.concat(df_list, ignore_index=True)
        return df.dropna()
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

# Data URL
file_url = "https://raw.githubusercontent.com/BlassMolina03/ENG-220-MATLAB-PROJECTS/main/Data%20Sheet%201.csv"
df = read_large_csv(file_url)

# Data Check
if df is not None:
    st.write("Data Loaded Successfully")

    # Clean Data
    df['Incident Date'] = pd.to_datetime(df['Incident Date'], errors='coerce')
    df = df.dropna(subset=['Incident Date'])
    df['day_of_week'] = df['Incident Date'].dt.day_name()

    # Show the cleaned data table at the beginning
    st.subheader("Cleaned Data Table")
    st.write(df)

    # Dropdown for graph type selection
    graph_choice = st.selectbox("Choose a graph to view", ["Monthly Increase", "Gender Analysis", "Incidents by City or County", "Incidents by Date"])

    # Process Monthly Analysis
    df['month_year'] = df['Incident Date'].dt.to_period('M')
    monthly_counts = df['month_year'].value_counts().sort_index()

    # Process Gender Analysis
    gender_counts = df['Participant Gender'].value_counts()

    # Process City Or County Analysis
    city_or_county_counts = df['City Or County'].value_counts()  # Correct column name

    # Process Date Analysis
    incident_date_counts = df['Incident Date'].dt.date.value_counts().sort_index()

    if graph_choice == "Monthly Increase":
        st.subheader("Monthly Increase of Gun Violence Incidents")
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(monthly_counts.index.astype(str), monthly_counts.values, marker='o')
        ax.set_xlabel("Month-Year")  # x-axis label
        ax.set_ylabel("Number of Incidents")  # y-axis label
        ax.set_title("Monthly Increase in Gun Violence Incidents")
        plt.xticks(rotation=45)
        st.pyplot(fig)  # Use matplotlib's figure with customizations

    elif graph_choice == "Gender Analysis":
        st.subheader("Incidents by Gender")
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(x=gender_counts.index, y=gender_counts.values, ax=ax, palette="viridis")
        ax.set_xlabel("Gender")  # x-axis label
        ax.set_ylabel("Number of Incidents")  # y-axis label
        ax.set_title("Incidents by Gender")
        st.pyplot(fig)  # Use matplotlib's figure with customizations

    elif graph_choice == "Incidents by City or County":
        st.subheader("Incidents by City or County")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x=city_or_county_counts.index, y=city_or_county_counts.values, ax=ax, palette="coolwarm")
        ax.set_xlabel("City or County")  # x-axis label
        ax.set_ylabel("Number of Incidents")  # y-axis label
        ax.set_title("Incidents by City or County")
        plt.xticks(rotation=45)
        st.pyplot(fig)  # Use matplotlib's figure with customizations

    elif graph_choice == "Incidents by Date":
        st.subheader("Incidents by Date")
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(incident_date_counts.index.astype(str), incident_date_counts.values, marker='x')
        ax.set_xlabel("Date")  # x-axis label
        ax.set_ylabel("Number of Incidents")  # y-axis label
        ax.set_title("Incidents by Date")
        plt.xticks(rotation=45)
        st.pyplot(fig)  # Use matplotlib's figure with customizations

else:
    st.write("Failed to load data.")