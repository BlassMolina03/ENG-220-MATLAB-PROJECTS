# -*- coding: utf-8 -*-
"""ENG_220_final_project_bla.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RT3ePyhERXRieu12iabaNx2Zgihj31kQ
"""

import pandas as pd
import requests
import matplotlib.pyplot as plt
import seaborn as sns
import textwrap

# Define the raw URL for the CSV file
file_url = "https://raw.githubusercontent.com/BlassMolina03/ENG-220-MATLAB-PROJECTS/main/Data%20Sheet%201.csv"

# Function to read a large or potentially malformed CSV file
def read_large_csv(url):
    try:
        chunk_size = 1000  # Number of rows per chunk
        chunks = pd.read_csv(url,
                             encoding='ISO-8859-1',  # Handle potential encoding issues
                             sep=',',  # Comma as separator
                             on_bad_lines='skip',  # Skip malformed lines
                             chunksize=chunk_size)  # Read in chunks
        df_list = []
        for chunk in chunks:
            df_list.append(chunk)
        df = pd.concat(df_list, ignore_index=True)
        print("Data loaded successfully!")
        return df
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Read the file from the URL
df = read_large_csv(file_url)

# If the dataframe is loaded successfully, process and visualize the data
if df is not None:
    # Clean the dataset
    df_cleaned = df.dropna()

    # Save the cleaned dataset to a new file (optional)
    df_cleaned.to_csv('Cleaned_Data.csv', index=False)

    # Display basic information about the cleaned dataset
    print(df_cleaned.info())
    print(df_cleaned.isnull().sum())
    print(df_cleaned.head())

    # Ensure 'Incident Date' is converted to datetime
    df_cleaned['Incident Date'] = pd.to_datetime(df_cleaned['Incident Date'], errors='coerce')
    df_cleaned = df_cleaned.dropna(subset=['Incident Date'])

    # Extract day of the week
    df_cleaned['day_of_week'] = df_cleaned['Incident Date'].dt.day_name()

    # Get the peak day of the week
    day_of_week_counts = df_cleaned['day_of_week'].value_counts()
    peak_day = day_of_week_counts.idxmax()
    peak_day_value = day_of_week_counts.max()

    # Plot incidents by day of the week
    plt.figure(figsize=(10, 6))
    sns.countplot(data=df_cleaned, x='day_of_week',
                  order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
    plt.title(f'Incidents by Day of the Week (Peak: {peak_day} - {peak_day_value} incidents)')
    plt.xlabel('Day of the Week')
    plt.ylabel('Number of Incidents')
    plt.xticks(rotation=45)
    plt.show()

    # Monthly trend analysis
    df_cleaned.set_index('Incident Date', inplace=True)
    monthly_trend = df_cleaned.resample('M').size()
    monthly_trend_df = monthly_trend.reset_index(name='Number of Incidents')

    peak_month = monthly_trend_df.loc[monthly_trend_df['Number of Incidents'].idxmax()]
    bottom_month = monthly_trend_df.loc[monthly_trend_df['Number of Incidents'].idxmin()]

    # Plot the monthly trend
    plt.figure(figsize=(14, 7))
    plt.plot(monthly_trend.index, monthly_trend.values, marker='o', linestyle='-')
    plt.title(
        f'Monthly Trend of Incidents\n'
        f'Peak: {peak_month["Incident Date"].strftime("%B %Y")} ({peak_month["Number of Incidents"]} incidents), '
        f'Bottom: {bottom_month["Incident Date"].strftime("%B %Y")} ({bottom_month["Number of Incidents"]} incidents)'
    )
    plt.xlabel('Date')
    plt.ylabel('Number of Incidents')
    plt.grid(True)
    plt.show()

    # Print peak and bottom months
    print("Peak Month:", peak_month)
    print("Bottom Month:", bottom_month)

    # Plot city or county
    df_cleaned['City Or County'] = df_cleaned['City Or County'].apply(lambda x: '\n'.join(textwrap.wrap(x, width=15)))
    plt.figure(figsize=(12, 30))
    sns.countplot(data=df_cleaned, y='City Or County',
                  order=df_cleaned['City Or County'].value_counts().index)
    plt.title('Incidents by City or County')
    plt.xlabel('Number of Incidents')
    plt.ylabel('City or County')
    plt.tight_layout()
    plt.show()

    # Gender analysis
    gender_counts = df_cleaned['Participant Gender'].value_counts()
    plt.figure(figsize=(8, 6))
    sns.barplot(x=gender_counts.index, y=gender_counts.values, palette='muted')
    plt.title('Comparison of Incidents by Participant Gender')
    plt.xlabel('Gender')
    plt.ylabel('Number of Incidents')
    plt.show()

    total_incidents = gender_counts.sum()
    gender_percentages = (gender_counts / total_incidents) * 100
    print("\nGender Breakdown (%):")
    print(gender_percentages)

    plt.figure(figsize=(8, 8))
    plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=140, colors=['#66b3ff', '#99ff99'])
    plt.title('Incidents by Participant Gender')
    plt.show()

    # Participant Age Group Analysis
    plt.figure(figsize=(10, 6))
    sns.countplot(data=df_cleaned, x='Participant Age Group',
                  order=df_cleaned['Participant Age Group'].value_counts().index)
    plt.title('Incidents by Participant Age Group')
    plt.xlabel('Age Group')
    plt.ylabel('Number of Incidents')
    plt.show()

else:
    print("Failed to load the data.")