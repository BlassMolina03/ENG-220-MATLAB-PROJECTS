# -*- coding: utf-8 -*-
"""project_try4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RT3ePyhERXRieu12iabaNx2Zgihj31kQ
"""

import pandas as pd
import streamlit as st

# Preload Data
def read_large_csv(url):
    try:
        chunk_size = 1000
        chunks = pd.read_csv(url, encoding="ISO-8859-1", sep=",", on_bad_lines="skip", chunksize=chunk_size)
        df_list = [chunk for chunk in chunks]
        df = pd.concat(df_list, ignore_index=True)
        return df.dropna()
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

# Replace with your actual data URL
file_url = "https://raw.githubusercontent.com/BlassMolina03/ENG-220-MATLAB-PROJECTS/main/Data%20Sheet%201.csv"
df = read_large_csv(file_url)

# Check if the dataframe was successfully loaded
if df is not None:
    st.write("Data Loaded Successfully!")
else:
    st.write("Failed to load data.")

# Show available columns in the data
st.write("Available columns in the dataset:", df.columns)

# Let user select the graph
graph_option = st.selectbox("Select the Graph", [
    'Incidents by Date',
    'Monthly Increase',
    'Incidents by Gender',
    'Incidents by City/County'
])

# Plotting for 'Incidents by Date'
if graph_option == 'Incidents by Date':
    if 'Incident Date' in df.columns:
        df['Incident Date'] = pd.to_datetime(df['Incident Date'], errors='coerce')
        df['day_of_week'] = df['Incident Date'].dt.day_name()
        incident_counts = df['Incident Date'].value_counts().sort_index()

        st.write("Incident counts by Date:", incident_counts.head())  # Debugging: Displaying some of the data
        st.subheader("Incidents by Date")
        st.line_chart(incident_counts)
    else:
        st.write("Column 'Incident Date' not found in the data.")

# Plotting for 'Monthly Increase'
elif graph_option == 'Monthly Increase':
    if 'Incident Date' in df.columns:
        df['Incident Date'] = pd.to_datetime(df['Incident Date'], errors='coerce')
        df['month_year'] = df['Incident Date'].dt.to_period('M')
        monthly_counts = df['month_year'].value_counts().sort_index()

        st.write("Monthly incident counts:", monthly_counts.head())  # Debugging: Displaying some of the data
        st.subheader("Monthly Increase")
        st.line_chart(monthly_counts)
    else:
        st.write("Column 'Incident Date' not found in the data.")

# Plotting for 'Incidents by Gender'
elif graph_option == 'Incidents by Gender':
    if 'Participant Gender' in df.columns:
        gender_counts = df['Participant Gender'].value_counts()

        st.write("Incidents by Gender:", gender_counts)  # Debugging: Displaying some of the data
        st.subheader("Incidents by Gender")
        st.bar_chart(gender_counts)
    else:
        st.write("Column 'Participant Gender' not found in the data.")

# Plotting for 'Incidents by City/County'
elif graph_option == 'Incidents by City/County':
    if 'City' in df.columns:
        city_counts = df['City'].dropna().value_counts()
        st.subheader("Incidents by City")
        st.bar_chart(city_counts)
    elif 'County' in df.columns:
        county_counts = df['County'].dropna().value_counts()
        st.subheader("Incidents by County")
        st.bar_chart(county_counts)
    else:
        st.write("Columns 'City' or 'County' not found in the data.")
else:
    st.write("Please select a valid graph option.")