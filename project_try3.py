# -*- coding: utf-8 -*-
"""project_try3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RT3ePyhERXRieu12iabaNx2Zgihj31kQ
"""

# -*- coding: utf-8 -*-
"""streamlit_app.py

Interactive Gun Violence Data Visualization App
"""

import pandas as pd
import streamlit as st

# Preload Data
def read_large_csv(url):
    try:
        chunk_size = 1000
        chunks = pd.read_csv(url, encoding="ISO-8859-1", sep=",", on_bad_lines="skip", chunksize=chunk_size)
        df_list = [chunk for chunk in chunks]
        df = pd.concat(df_list, ignore_index=True)
        return df.dropna()
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

# Load the data
file_url = "https://raw.githubusercontent.com/BlassMolina03/ENG-220-MATLAB-PROJECTS/main/Data%20Sheet%201.csv"
df = read_large_csv(file_url)

# Check if the data is loaded
if df is not None:
    st.write("Data Loaded Successfully.")

    # Clean Data - Specify the date format
    try:
        # Adjust the date format if needed
        df['Incident Date'] = pd.to_datetime(df['Incident Date'], format='%Y-%m-%d', errors='coerce')
    except Exception as e:
        st.write(f"Error parsing dates: {e}")

    # Drop rows with invalid 'Incident Date' values
    df = df.dropna(subset=['Incident Date'])

    # Add day of the week column
    df['day_of_week'] = df['Incident Date'].dt.day_name()

    # Create month-year column for monthly analysis
    df['month_year'] = df['Incident Date'].dt.to_period('M')

    # Sidebar options
    st.sidebar.title("Graph Selection")
    graph_option = st.sidebar.selectbox(
        "Select a graph to view",
        ['Monthly Trend', 'Incidents by Gender', 'Incidents by Date', 'Incidents by City/County']
    )

    # Graph for Monthly Trend
    if graph_option == 'Monthly Trend':
        monthly_counts = df['month_year'].value_counts().sort_index()
        st.subheader("Monthly Gun Violence Incidents")
        st.line_chart(monthly_counts)

    # Graph for Incidents by Gender
    elif graph_option == 'Incidents by Gender':
        gender_counts = df['Participant Gender'].value_counts()
        st.subheader("Incidents by Gender")
        st.bar_chart(gender_counts)

    # Graph for Incidents by Date
    elif graph_option == 'Incidents by Date':
        daily_counts = df['Incident Date'].value_counts().sort_index()
        st.subheader("Incidents by Date")
        st.line_chart(daily_counts)

    # Graph for Incidents by City or County
    elif graph_option == 'Incidents by City/County':
        # Make sure the column exists or adjust accordingly
        if 'City' in df.columns:
            city_counts = df['City'].value_counts()
            st.subheader("Incidents by City")
            st.bar_chart(city_counts)
        elif 'County' in df.columns:
            county_counts = df['County'].value_counts()
            st.subheader("Incidents by County")
            st.bar_chart(county_counts)
        else:
            st.write("City or County data not available in this dataset.")

else:
    st.write("Failed to load data.")